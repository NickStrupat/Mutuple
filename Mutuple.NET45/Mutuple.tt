<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#/*using System;
using System.Collections;
using System.Collections.Generic;
*/#>
namespace Mutuple {
	public class Mutuple<T1, T2> <#/*: IComparable<Mutuple<T1, T2>>, IEquatable<Mutuple<T1, T2>>, IStructuralEquatable, IStructuralComparable, IComparable*/#> {
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
<#/*
		public override Boolean Equals(Object obj) => Equals(obj as Mutuple<T1, T2>);
		public Boolean Equals(Object other, IEqualityComparer comparer) => Equals(other as Mutuple<T1, T2>, comparer);
		public Boolean Equals(Mutuple<T1, T2> other) => Equals(other, EqualityComparer<Mutuple<T1, T2>>.Default);
		public Boolean Equals(Mutuple<T1, T2> other, IEqualityComparer comparer) => other != null && comparer.Equals(Item1, other.Item1) && comparer.Equals(Item2, other.Item2);

		public override Int32 GetHashCode() => GetHashCode(EqualityComparer<Mutuple<T1, T2>>.Default);

		public Int32 GetHashCode(IEqualityComparer comparer) {
			throw new NotImplementedException();
		}

		public Int32 CompareTo(Object obj) => CompareTo(obj as Mutuple<T1, T2>);
		public Int32 CompareTo(Object other, IComparer comparer) => CompareTo(other as Mutuple<T1, T2>, Comparer<Mutuple<T1, T2>>.Default);
		public Int32 CompareTo(Mutuple<T1, T2> other) => CompareTo(other, Comparer<Mutuple<T1, T2>>.Default);
		public Int32 CompareTo(Mutuple<T1, T2> other, IComparer comparer) {
			if (other == null)
				return 1;
			var num1 = comparer.Compare
			return comparer.Compare(Item1, other.Item1);
		}
*/#>
	}
<#
	for (var i = 3; i <= 128; ++i) {
		var suffixes = Enumerable.Range(0, i).Select(x => i == 1 ? "" : (x + 1).ToString());
		var types = suffixes.Select(x => "T" + x);
		var typeArgs = String.Join(", ", types);
		var baseTypeArgs = String.Join(", ", types.Take(i - 1));
		var invokeParams = String.Join(", ", suffixes.Select(x => "T" + x + " arg" + x));
		var invokeArgs = String.Join(", ", suffixes.Select(x => "arg" + x));
#>
	public class Mutuple<<#= typeArgs #>>
	: Mutuple<<#= baseTypeArgs #>> {
		public T<#=i#> Item<#=i#> { get; set; }
	}
<#	} #>
}